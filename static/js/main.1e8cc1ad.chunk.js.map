{"version":3,"sources":["components/EndScreen/EndScreen.jsx","components/Game/Game.jsx","components/StartScreen/StartScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["EndScreen","isPlayerWon","Game","useState","isPlayerTurn","setPlayerTurn","setIsPlayerWon","playerScore","setPlayerScore","computerScore","setComputerScore","countRef","useRef","count","useMemo","current","computerTurn","useCallback","setTimeout","selectedComputerNumber","remainedMatches","prevState","playerTurn","event","value","target","useEffect","resetGame","className","type","onClick","StartScreen","startGame","App","started","setStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e8cc1ad.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './end.css';\n\nexport const EndScreen = ({ isPlayerWon }) => (\n  <div>\n    { isPlayerWon ? 'Player won!' : ''}\n    { !isPlayerWon ? 'Computer won!' : ''}\n  </div>\n);\n\nEndScreen.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useMemo, useRef, useState, useCallback } from 'react';\nimport './game.css';\nimport { EndScreen } from '../EndScreen/EndScreen';\n\n\nexport const Game = () => {\n  const [isPlayerTurn, setPlayerTurn] = useState(true);\n  const [isPlayerWon, setIsPlayerWon] = useState(false);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n\n  const countRef = useRef();\n\n  const matchesToWin = 25;\n  const count = useMemo(() => (matchesToWin - playerScore - computerScore),\n  [playerScore, computerScore]);\n\n  countRef.current = count;\n  const computerTurn = useCallback(\n    () => {\n      setTimeout(() => {\n        const remainedMatches = countRef.current;\n        let selectedComputerNumber;\n\n        if (remainedMatches > 3) {\n          selectedComputerNumber = (computerScore + 3) % 2 === 0 ? 1 : 2;\n        }\n        if (countRef.current === 3) {\n          selectedComputerNumber = (computerScore + 3) % 2 === 0 ? 3 : 2;\n        }\n        if (remainedMatches < 3) {\n          selectedComputerNumber = (computerScore + 2) % 2 === 0 ? 2 : 1;\n        }\n        \n        if (remainedMatches - 3 === 3 && (computerScore + 3) % 2 !== 0) {\n          selectedComputerNumber = 3;\n        } else if (remainedMatches - 2 === 3 && (computerScore + 2) % 2 !== 0) {\n          selectedComputerNumber = 2;\n        } else if (remainedMatches - 1 === 3 && (computerScore + 1) % 2 !== 0) {\n          selectedComputerNumber = 1;\n        }\n\n        setComputerScore((prevState) => prevState + selectedComputerNumber);\n        setPlayerTurn(true);\n      }, 1000);\n    },\n    [],\n  );\n\n  const playerTurn = (event) => {\n    const { value } = event.target;\n    if (!isPlayerTurn || count - +value < 0) return;\n\n    if (count - +value !== 0) {\n      setPlayerTurn(false);\n      setPlayerScore(playerScore + +value);\n      computerTurn();\n    } else {\n      setPlayerScore(playerScore + +value);\n      setPlayerTurn(false);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 0 && playerScore % 2 === 0) {\n      setIsPlayerWon(true);\n    }\n  }, [count, playerScore]);\n\n  const resetGame = useCallback(\n    () => {\n      setIsPlayerWon(false);\n      setPlayerScore(0);\n      setComputerScore(0);\n      setPlayerTurn(true);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <div className=\"computer__counter\">\n        {'Computer score: '}\n        {computerScore}\n      </div>\n      <div className=\"counter\">\n        Matches left:\n        {count}\n      </div>\n      <div className=\"players__counter\">\n        {'Player score: '}\n        {playerScore}\n      </div>\n      <button\n        type=\"button\"\n        className=\"reset__button\"\n        onClick={resetGame}\n      >\n        Restart Game\n      </button>\n      {count === 0 ? (<EndScreen isPlayerWon={isPlayerWon} />) : ''}\n      <div className=\"button_container\">\n        <button\n          className=\"player__button\"\n          value={1}\n          onClick={playerTurn}\n        >\n          1\n        </button>\n        <button\n          type=\"button\"\n          className=\"player__button\"\n          value={2}\n          onClick={playerTurn}\n        >\n          2\n        </button>\n        <button\n          type=\"button\"\n          className=\"player__button\"\n          value={3}\n          onClick={playerTurn}\n        >\n          3\n        </button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './start.css';\n\nexport const StartScreen = ({ startGame }) => (\n  <button\n    type=\"button\"\n    className=\"start__button\"\n    onClick={() => { startGame() }}\n  >\n    Start\n  </button>\n);\n\nStartScreen.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n","import React, {useState, useCallback } from 'react'\nimport './App.css';\nimport { Game } from './components/Game/Game'\nimport { StartScreen } from './components/StartScreen/StartScreen'\nimport { EndScreen } from './components/EndScreen/EndScreen'\nexport const App = () => {\n  const [started, setStarted] = useState(false);\n\n  const startGame = useCallback(\n    () => {\n      setStarted(true);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <div className=\"game-window\">\n        <div className=\"game-window__container\">\n          {!started\n            ? <StartScreen startGame={startGame} />\n            : ''}\n          {started\n            ? (<Game />)\n            : ''}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}