{"version":3,"sources":["components/EndScreen/EndScreen.jsx","components/Game/Game.jsx","components/StartScreen/StartScreen.jsx","App.jsx","index.js"],"names":["EndScreen","isPlayerWon","className","Game","firstTurn","maxMatches","activeMatches","useState","isPlayerTurn","setPlayerTurn","setIsPlayerWon","playerScore","setPlayerScore","computerScore","setComputerScore","countRef","useRef","matchesToWin","count","useMemo","current","computerTurn","useCallback","setTimeout","selectedComputerNumber","remainedMatches","prevState","playerTurn","event","value","Number","target","useEffect","Array","fill","map","role","type","onClick","el","i","StartScreen","startGame","setMaxMatches","setActiveMatches","placeholder","onChange","changeEvent","min","max","App","started","setStarted","setFirstTurn","whosfirstTurn","maxMatchesCount","activeMatchesCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4af5c8e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './end.scss';\n\nexport const EndScreen = ({ isPlayerWon }) => (\n  <div className=\"end\">\n    <div className=\"end__title\">\n      { isPlayerWon ? 'âœ¨You won!âœ¨' : ''}\n      { !isPlayerWon ? 'ðŸ˜­Computer won!ðŸ˜­' : ''}\n    </div>\n  </div>\n);\n\nEndScreen.propTypes = {\n  isPlayerWon: PropTypes.bool.isRequired,\n};\n","import React, {\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport './game.scss';\nimport { EndScreen } from '../EndScreen/EndScreen';\n\nexport const Game = ({ firstTurn, maxMatches, activeMatches }) => {\n  const [isPlayerTurn, setPlayerTurn] = useState(firstTurn === 1);\n  const [isPlayerWon, setIsPlayerWon] = useState(false);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const countRef = useRef();\n  const matchesToWin = (maxMatches * 2) + 1 || 25;\n  const count = useMemo(() => (matchesToWin - playerScore - computerScore),\n    [playerScore, computerScore, matchesToWin]);\n\n  countRef.current = count;\n\n  const computerTurn = useCallback(\n    () => {\n      setTimeout(() => {\n        const remainedMatches = countRef.current;\n        let selectedComputerNumber;\n        if (remainedMatches > 3) {\n          if ((remainedMatches - 1) % 4 === 0 || (remainedMatches - 1) % 4 === 1) {\n            selectedComputerNumber = 1;\n          } else if ((remainedMatches - 3) % 4 === 0 || (remainedMatches - 3) % 4 === 1) {\n            selectedComputerNumber = 3;\n          }\n\n          if (((computerScore + 3) % 2 !== 0) && ((remainedMatches - 3) === 3)) {\n            selectedComputerNumber = 3;\n          } else if (((computerScore + 2) % 2 !== 0) && ((remainedMatches - 2) === 3)) {\n            selectedComputerNumber = 2;\n          } else if (((computerScore + 1) % 2 !== 0) && ((remainedMatches - 1) === 3)) {\n            selectedComputerNumber = 1;\n          }\n        }\n\n        if (remainedMatches === 3) {\n          selectedComputerNumber = (computerScore % 2) === 0 ? 2 : 3;\n        }\n\n        if (remainedMatches === 1 || remainedMatches === 2) {\n          selectedComputerNumber = 1;\n        }\n\n        setComputerScore((prevState) => prevState + selectedComputerNumber);\n        setPlayerTurn(true);\n      }, 1000);\n    },\n    [computerScore],\n  );\n\n  const playerTurn = (event) => {\n    const value = Number(event.target.value);\n    if (!isPlayerTurn || count - value < 0) return;\n\n    if (count - value !== 0) {\n      setPlayerTurn(false);\n      setPlayerScore(playerScore + value);\n      computerTurn();\n    } else {\n      setPlayerScore(playerScore + value);\n      setPlayerTurn(false);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 0 && playerScore % 2 === 0) {\n      setIsPlayerWon(true);\n    }\n  }, [count, playerScore]);\n\n  const createButtons = () => (\n    Array(activeMatches || 3).fill().map((el, i) => (\n      <button\n        type=\"button\"\n        className=\"game__button button\"\n        value={i + 1}\n        onClick={playerTurn}\n      >\n        {i + 1}\n      </button>\n    ))\n  );\n\n  const resetGame = () => {\n    setIsPlayerWon(false);\n    setPlayerScore(0);\n    setComputerScore(0);\n    setPlayerTurn(true);\n    if (firstTurn === 2) {\n      computerTurn();\n    }\n  };\n\n  useEffect(() => {\n    if (firstTurn === 2) {\n      computerTurn();\n    }\n  }, [firstTurn, computerTurn]);\n\n  return (\n    <div className=\"game\">\n      {count === 0 ? (<EndScreen isPlayerWon={isPlayerWon} />)\n        : (\n          <>\n            <div className=\"game__counters-container\">\n              <div className=\"game__counter\">\n                {'Computer score: '}\n                {computerScore}\n              </div>\n              <div className=\"game__counter\">\n                Matches left:\n                {count}\n                <div className=\"game__emodji-container\">\n                  { count > 0\n                    ? Array(count).fill().map(() => (\n                      <span role=\"img\">ðŸ”¥</span>))\n                    : ''}\n                </div>\n              </div>\n              <div className=\"game__counter\">\n                {'Player score: '}\n                {playerScore}\n              </div>\n            </div>\n\n            <div className=\"game__title\">\n              {isPlayerTurn ? 'Your Turn now!' : 'Computer Turn now!'}\n            </div>\n            <div className=\"game__title\">\n              Choose amount of matches to take\n            </div>\n            <button\n              type=\"button\"\n              className=\"game__reset button\"\n              onClick={resetGame}\n            >\n              Restart Game\n            </button>\n            <div className=\"game__buttons-container\">\n              {createButtons()}\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './start.scss';\n\nexport const StartScreen = ({ startGame }) => {\n  const [maxMatches, setMaxMatches] = useState(12);\n  const [activeMatches, setActiveMatches] = useState(3);\n\n  const changeMaxMatches = (changeEvent) => (\n    setMaxMatches(changeEvent.target.value)\n  );\n\n  const changeActiveMatches = (changeEvent) => (\n    setActiveMatches(changeEvent.target.value)\n  );\n\n  return (\n    <div className=\"start\">\n      <div className=\"start__title\">\n        Standart Game Mode\n      </div>\n      <div className=\"start__container\">\n        <button\n          type=\"button\"\n          className=\"start__button\"\n          onClick={() => {\n            startGame(1);\n          }}\n        >\n          Player First Turn\n        </button>\n        <button\n          type=\"button\"\n          className=\"start__button\"\n          onClick={() => {\n            startGame(2);\n          }}\n        >\n          Computer First Turn\n        </button>\n      </div>\n\n      <div className=\"start__custom\">\n        <div className=\"start__title\">\n          Custom Game Mode\n        </div>\n        <div className=\"start__container\">\n          <div>\n            <span className=\"start__input-title\">\n              Enter Max Matches here :\n            </span>\n            <input\n              type=\"number\"\n              className=\"start__input max-matches\"\n              placeholder=\"Enter Amount of matches\"\n              value={maxMatches}\n              onChange={changeMaxMatches}\n              min=\"2\"\n              max=\"99\"\n            />\n          </div>\n          <div>\n            <span className=\"start__input-title\">\n              Enter Active Matches here :\n            </span>\n            <input\n              type=\"number\"\n              className=\"start__input active-matches\"\n              placeholder=\"Enter Amount of active matches\"\n              value={activeMatches}\n              onChange={changeActiveMatches}\n              min=\"1\"\n              max=\"99\"\n            />\n          </div>\n        </div>\n        <div className=\"start__container\">\n          <button\n            type=\"button\"\n            className=\"start__button\"\n            onClick={() => {\n              startGame(1, maxMatches, activeMatches);\n            }}\n          >\n            Player First Turn\n          </button>\n          <button\n            type=\"button\"\n            className=\"start__button\"\n            onClick={() => {\n              startGame(2, maxMatches, activeMatches);\n            }}\n          >\n            Computer First Turn\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nStartScreen.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport './reset.scss';\nimport './App.scss';\nimport { Game } from './components/Game/Game';\nimport { StartScreen } from './components/StartScreen/StartScreen';\n\nexport const App = () => {\n  const [started, setStarted] = useState(false);\n  const [firstTurn, setFirstTurn] = useState(0);\n  const [maxMatches, setMaxMatches] = useState(14);\n  const [activeMatches, setActiveMatches] = useState(3);\n  const startGame = useCallback(\n    (whosfirstTurn, maxMatchesCount, activeMatchesCount) => {\n      setStarted(true);\n      setFirstTurn(whosfirstTurn);\n      if (maxMatchesCount !== maxMatches) {\n        setMaxMatches(+maxMatchesCount);\n      }\n      if (activeMatchesCount !== activeMatches) {\n        setActiveMatches(+activeMatchesCount);\n      }\n    },\n    [maxMatches, activeMatches],\n  );\n\n  return (\n    <>\n      <div className=\"game-window\">\n        <div className=\"game-window__container\">\n          {!started\n            ? <StartScreen startGame={startGame} />\n            : ''}\n          {started\n          && (\n            <Game\n              firstTurn={firstTurn}\n              maxMatches={maxMatches}\n              activeMatches={activeMatches}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}