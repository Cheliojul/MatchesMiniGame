{"version":3,"sources":["components/EndScreen/EndScreen.jsx","components/Game/Game.jsx","components/StartScreen/StartScreen.jsx","App.js","index.js"],"names":["EndScreen","isPlayerWon","Game","gamemode","maxMatches","activeMatches","useState","isPlayerTurn","setPlayerTurn","setIsPlayerWon","playerScore","setPlayerScore","computerScore","setComputerScore","countRef","useRef","matchesToWin","count","useMemo","current","computerTurn","useCallback","setTimeout","selectedComputerNumber","remainedMatches","prevState","playerTurn","event","value","Number","target","useEffect","resetGame","className","type","onClick","Array","fill","map","el","i","StartScreen","startGame","setGameMode","setMaxMatches","setActiveMatches","placeholder","onChange","changeEvent","min","App","started","setStarted","firstTurn","setFirstTurn","maxMatchesCount","activeMatchesCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c096bdfb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './end.css';\n\nexport const EndScreen = ({ isPlayerWon }) => (\n  <div>\n    { isPlayerWon ? 'Player won!' : ''}\n    { !isPlayerWon ? 'Computer won!' : ''}\n  </div>\n);\n\nEndScreen.propTypes = {\n  isPlayerWon: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useMemo, useRef, useState, useCallback } from 'react';\nimport './game.css';\nimport { EndScreen } from '../EndScreen/EndScreen';\n\n\nexport const Game = ({ gamemode, maxMatches, activeMatches }) => {\n  const [isPlayerTurn, setPlayerTurn] = useState(gamemode === 1 ? true : false);\n  const [isPlayerWon, setIsPlayerWon] = useState(false);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [computerScore, setComputerScore] = useState(0);\n  const countRef = useRef();\n  debugger;\n  const matchesToWin = (maxMatches * 2) + 1 || 25;\n  const count = useMemo(() => (matchesToWin - playerScore - computerScore),\n  [playerScore, computerScore]);\n\n  countRef.current = count;\n\n  const computerTurn = useCallback(\n    () => {\n      setTimeout(() => {\n        const remainedMatches = countRef.current;\n        let selectedComputerNumber;\n        if (remainedMatches > 3) {\n          if ((remainedMatches - 1) % 4 === 0 || (remainedMatches- 1) % 4 === 1) {\n            selectedComputerNumber = 1;\n          } else if ((remainedMatches - 3) % 4 === 0 || (remainedMatches- 3) % 4 === 1) {\n            selectedComputerNumber = 3;\n          }\n          selectedComputerNumber = (computerScore + 3) % 2 === 0 ? 1 : 2;\n        }\n        if (remainedMatches === 3) {\n          selectedComputerNumber = (computerScore % 2 ) === 0 ? 2 : 3;\n        }\n        if (remainedMatches < 3) {\n          selectedComputerNumber = (computerScore % 2 ) === 0 ? 2 : 1;\n        }\n        \n        if (remainedMatches - 3 === 3 && (computerScore + 3) % 2 !== 0) {\n          selectedComputerNumber = 3;\n        } else if (remainedMatches - 2 === 3 && (computerScore + 2) % 2 !== 0) {\n          selectedComputerNumber = 2;\n        } else if (remainedMatches - 1 === 3 && (computerScore + 1) % 2 !== 0) {\n          selectedComputerNumber = 1;\n        }\n\n        setComputerScore((prevState) => prevState + selectedComputerNumber);\n        setPlayerTurn(true);\n      }, 1000);\n    },\n    [],\n  );\n\n  const playerTurn = (event) => {\n    const value  = Number(event.target.value);\n    if (!isPlayerTurn || count - value < 0) return;\n\n    if (count - value !== 0) {\n      setPlayerTurn(false);\n      setPlayerScore(playerScore + value);\n      computerTurn();\n    } else {\n      setPlayerScore(playerScore + value);\n      setPlayerTurn(false);\n    }\n  };\n\n  useEffect(() => {\n    if (count === 0 && playerScore % 2 === 0) {\n      setIsPlayerWon(true);\n    }\n  }, [count, playerScore]);\n \n  const createButtons = () => (\n    Array(activeMatches).fill().map((el, i) => (\n      <button\n        type=\"button\" \n        className=\"player__button\"\n        value={i+1}\n        onClick={playerTurn}\n      >\n        {i+1}\n      </button>\n  ))\n  )\n  const resetGame = useCallback(\n    () => {\n      setIsPlayerWon(false);\n      setPlayerScore(0);\n      setComputerScore(0);\n      setPlayerTurn(true);\n      if (gamemode === 2){\n        computerTurn();\n      }\n    },\n    [],\n  );\n  useEffect(() => {\n   if (gamemode === 2){\n     computerTurn();\n   } \n  },[])\n  \n  return (\n    <>\n      <div className=\"computer__counter\">\n        {'Computer score: '}\n        {computerScore}\n      </div>\n      <div className=\"counter\">\n        Matches left:\n        {count}\n      </div>\n      <div className=\"players__counter\">\n        {'Player score: '}\n        {playerScore}\n      </div>\n      <button\n        type=\"button\"\n        className=\"reset__button\"\n        onClick={resetGame}\n      >\n        Restart Game\n      </button>\n      {count === 0 ? (<EndScreen isPlayerWon={isPlayerWon} />) : ''}\n      <div className=\"button_container\">\n        {createButtons()}\n      </div>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './start.scss';\n\nexport const StartScreen = ({ startGame, setGameMode }) => {\n  const [maxMatches, setMaxMatches] = useState(12);\n  const [activeMatches, setActiveMatches] = useState(3);\n\n  const changeMaxMatches = (changeEvent) => (\n    setMaxMatches(changeEvent.target.value)\n  )\n  const changeActiveMatches = (changeEvent) => (\n    setActiveMatches(changeEvent.target.value)\n  )\n\n  return (\n  <div  className=\"start\"> \n    <div className=\"start__title\">Standart Game Mode</div>\n    <div className=\"start__container\">\n    <button\n        type=\"button\"\n        className=\"start__button\"\n        onClick={() => {\n          startGame(1)\n        }}\n      >\n        Player First Turn\n      </button>\n      <button\n        type=\"button\"\n        className=\"start__button\"\n        onClick={() => {\n          startGame(2)\n        }}\n      >\n        Computer First Turn\n      </button>\n    </div>\n    \n    <div className=\"start__custom\">\n    <div className=\"start__title\">Custom Game Mode</div>\n      <input\n        type='number'\n        className=\"start__input max-matches\"\n        placeholder=\"Enter Amount of matches\"\n        value={maxMatches}\n        onChange={changeMaxMatches}\n        min='2'\n      >\n      </input>\n      <input\n        type='number'\n        className=\"start__input active-matches\"\n        placeholder=\"Enter Amount of active matches\"\n        value={activeMatches}\n        onChange={changeActiveMatches}\n        min='1'\n      >\n      </input>\n      <button\n        type=\"button\"\n        className=\"start__button\"\n        onClick={() => {\n          startGame(1, maxMatches, activeMatches)\n        }}\n      >\n        Player First Turn\n      </button>\n      <button\n        type=\"button\"\n        className=\"start__button\"\n        onClick={() => {\n          startGame(2, maxMatches, activeMatches)\n        }}\n      >\n        Computer First Turn\n      </button>\n    </div>\n  </div>\n  );\n}\n\nStartScreen.propTypes = {\n  startGame: PropTypes.func.isRequired,\n};\n","import React, {useState, useCallback } from 'react';\nimport './App.scss';\nimport { Game } from './components/Game/Game';\nimport { StartScreen } from './components/StartScreen/StartScreen';\n\nexport const App = () => {\n  const [started, setStarted] = useState(false);\n  const [firstTurn, setFirstTurn] = useState(0);\n  const [maxMatches, setMaxMatches] = useState(14);\n  const [activeMatches, setActiveMatches] = useState(3);\n  const startGame = useCallback(\n    (firstTurn, maxMatchesCount, activeMatchesCount ) => {\n      setStarted(true);\n      setFirstTurn(firstTurn);\n      if (maxMatchesCount !== maxMatches) {\n        setMaxMatches(maxMatches)\n      }\n      if (activeMatchesCount !== activeMatches) {\n        setActiveMatches(activeMatches);\n      }\n    },\n    [],\n  );\n\n  return (\n    <>\n      <div className=\"game-window\">\n        <div className=\"game-window__container\">\n          {!started\n            ? <StartScreen startGame={startGame} setFirstTurn={setFirstTurn} />\n            : ''}\n          {started &&\n            <Game\n              firstTurn={firstTurn}\n              maxMatches={maxMatches}\n              activeMatches={activeMatches}\n            />\n          }\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}